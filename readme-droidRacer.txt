Note: use a machine with atleast 16 threads and more than 16GB RAM for faster builds
(first build nearly 25 mins...incremental builds between 2-6 minutes)...otherwise may
take hours based on resources provided.


1. download and build android-4.0.1_r1 from http://source.android.com/source/initializing.html
   All instructions available on site. This version seems to work on Debian 6 
   too. Follow link http://www.techsomnia.net/2012/07/building-android-on-debian-6/
   for building source do the following
   $. build/envsetup.sh
   $lunch full-eng
   $make -j<n>  #n depends on the number of hardware threads your machine has
   $emulator  #launches android emulator

2. Add the following line if XInitThreads undefined error is obtained 
during make: (line to add below file location)

add-to-file: development/tools/emulator/opengl/host/renderer/Android.mk: 
LOCAL_LDLIBS += -lX11 
 

3. make sure your android source builds and runs fine. Then, replace the original
   corresponding files with the files provided in droidRacer repo. When there is 
   no corresponding file/folder in the original source add it from droidRacer.

4. $make update-api   #needed as the replaced files modify some Java APIs
   $make -j<n>
   emulator

5. when the emulator is running issue 
   $./adb shell "echo dalvik.vm.execution-mode = int:portable >> /data/local.prop"
   #this shifts emulator's interpreter from assembly (fast) to C mode..some of
   droidRacer instrumentation is on this C code.

6. create sdcard using mksdcard tool provided with android SDK. E.g.,
   $/mksdcard 8192M <path-leading-to-droidRacer>/out/target/product/generic/sdcard.img

7. restart emulator

8. install AbcClientApp from droidRacer-related-files  repo

9. copy abc.txt from droidRacer-related-files to /mnt/sdcard/Download using adb pull or
   Eclipse IDE interface for Android (DDMS)

10. abc.txt format
    line 1:process name of app (given in manifest file...can be seen when process name is
    displayed by Eclipse IDE DDMS interface when app is run on emulator)
    line 2: package name of app in L format (sample provided with droidRacer-related-files)
    line 3: depth of UI events to be generated by UI explorer of droidRacer
    line 4: give a positive number (10,100..etc) if an app has a long loading time before 
    UI is completely active initially. This will be like a waiting period only before first 
    event is triggered and not for each event.

11. Use ModelCheckingServer to start testing app using droidRacer. Inside ModelCheckingServer
    eclipse project provided with droidRacer-related-files you will find a few script files. 
    In each of these files change the paths leading to android tools or droidRacer files, with 
    the path on your machine. backupDatabase folder inside ModelCheckingServer stores the 
    database (.db and .db-journal) file corresponding to each testing run (UI explorer needs this).
    Also it stores trace generated for race detection ineach run. A sample trace can be found inside
    ModelCheckingServer. A .db file from any run can be copied back to 
    /data/data/<app-process-name>/databases/ folder to continue run from the corresponding exploration
    run. (The UI explorer backtracks after each run like a model-checker)

12. after completion of race detection for specified number of runs by AbcServer.java (inside
    ModelCheckingServer field:traceLimit) a summary with name pldi-race.log ...this only reports some
    stats and is irrelevant otherwise.

13. The trace generated is stored inside /data/data/<app-process-name>/abc_log.txt in emulator before copying to 
    backupDatabase folder outside emulator. Even if you do not use ModelCheckingServer you can directly
    click on the app to be tested for droidRacer to run on it. This should be done after force-stopping the 
    app (using Menu-> Managae apps) and loading abc.txt file. after completion of run i.e when AbcClientApp
    opens the complete trace along with detected races can be found inside /data/data/<app-process-name>.

14. Install the app and force-stop it before starting ModelCheckingServer outside emulator. ModelCheckingServer
    takes app-process-name to be tested as input. E.g., org.tomdroid   #to test Tomdroid app

15. If you want to only generate trace and not perform race detection then comment out 
    Thread.currentThread().abcPrintRacesDetectedToFile();				
    Thread.currentThread().abcComputeMemoryUsedByRaceDetector();
    lines from /frameworks/base/core/java/android/os/ModelCheckingDriver.java and re-build and run

16. droidRacer code is distributed inside /dalvik, /frameowrks/base folder and Thread.java, Timer.java and
    VMThread.java files.  ModelCheckingDriver is the main java file. In C++ /dalvik/mcd/abc.cpp is the main file.
    To understand the source code search for "Android bug-checker", abc or mcd for files inside droidRacer.
    androidBugChecker() inside ModelCheckingDriver.java is an important function for UI explorer. For
    race dtector the set of important functions are listed inside /dalvik/mcd/abc.cpp . Initializations
    for testing happens inside /dalvik/vm/native/java_lang_reflect_Method.cpp (search for Android bug-checker)

17. For any further queries drop a mail to hpmaiya.pallavi@gmail.com
    
